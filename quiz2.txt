QUIZ 2

Name:Dominick Bello
Grade:

Date out: 26 sept
Date due: 30 sept


1a: 1/1
1b: 1/1
2a: 1/1
2b: 1/1
2c: 1/1
3:  2/2
4:  2/2
5:  1/2
E:  _/2

late: _/(0)

1a) Although different mechanisms might be involved to implement the hierarchy,
   I have schedulable tasks in a priority hierarchy. Please list for me that
   hierarchy. 

Interrupt tasks
Kernel tasks
Real time tasks
Interactive tasks
Compute-bound tasks
Batch tasks
Idle tasks

1b) What is prioritized by the priority of this list.

Interrupt tasks
Kernel tasks
Real time tasks

2) Give a short defintion of the three basic concepts for scheduling:
   a- concurrency
   Concurrency is the process of threads running simultaneously to preform multiple instruction sequences.
   b- efficiency
   Efficincy allows the execution of the kernal to allocalte cpu cycles effectively.
   c- latency
   Latency allows a process to be bounded for an amount of time before a response. Too much latency can lead to the kernal not allocating cpu cycles effectively.
   
3) Among the types of scheduling classes are preemptible tasks and run-to-completion
   tasks. Explain the difference, with a sample reason a task would be of one class
   or another. 
  
   Preemptible tasks is a schedualing model that allows tasks to be yeilded and to stop taking computer resources.
   Run-to-completion is a schedualing model that tasks run onto finished or stops responding. 

   If a task isa real-time task with demanding requirements such as a interupt, then run-to-completion is necessary in completing the task. 


4) Some tasks run in user-contest, and some in system context. Explain what these
   contexts are and give an example tast that runs in each of the contexts.
   
User Context lets all the permissions to be given to the user and those permissions are followed. A user process, in particular, can contain several threads of control, called threads, that run code and can be independently scheduled. 
Systems Context allows the system to override the user permissions and execute a task. 

When doing parallel programing multiple threads will run on the same User Context.
DCP is a task that runs in system context.



5) Considering interrupt tasks, what is the top and the bottom of the task, and why
   are interrupt tasks divided this way? Give an example.
   
The top of the task is: [                             "OS", "INT SHELL" "ISR" -> "INTERUPT RESPONSE". 
                                                                  ^                    |
                                                                  |                    |  
The bottom is:  "Interrupt Source" -> "Interrupt Controller" -> "CPU".]    "INTERUPT RESPONSE"

   The example can be something you suppose might be true but illustrates the 
   concept. You do not need to find an actual, in code, example.

